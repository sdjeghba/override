    __               ______ _____
   / /__ _   _____  / / __ \__  /
  / / _ \ | / / _ \/ / / / //_ < 
 / /  __/ |/ /  __/ / /_/ /__/ / 
/_/\___/|___/\___/_/\____/____/  
                                 

* INDEX *

>$ objdump -d level03

On constate la présence d'un <main>, et de deux fonctions : <test> et <decrypt>.

Que fait <main> ?

* [0x1c(%esp)] => INPUT *
* 0x1337d00d   => CONST *

    - srand(time(NULL)) cela permet de modifier continuellement le seed que récupère rand() dans la fonction <test>
    - L'affichage du menu qui nous ai proposé au lancement du binaire
    - scanf( "%d", INPUT ... )  
    - test( INPUT, CONST )
    
Que fait <test> ?

* [0x8(%ebp)] => INPUT *
* [0xc(%ebp)] => CONST *

    - CONST - INPUT = DELTA
    - Si DELTA > 21 :
      Un jump est effectué, on récupère un nombre aléatoire avec rand(), qui est ensuite utilisé en paramètre pour <decrypt>
    - Si DELTA < 21 : 
      Traitement de DELTA afin de déterminer la destination de jmp
      ------------------------------------------------------------
      eax = DELTA           
      eax << 2              
      eax + 0x80489f0
      jmp *eax
      ------------------------------------------------------------
      Un jump est effectué, on récupère DELTA cette fois ci, qui est ensuite utilisé en paramètre pour <decrypt>
      
      # Dressons un tableau des INPUT qui nous permettent d'obtenir un DELTA <= 21 :
      
      # python -c 'for i in range(22):x = 0x1337d00d - i; print("%d => %d" % (x,i));'
        
        322424845 => 0
        322424844 => 1
        322424843 => 2
        ...
        322424829 => 16
        322424828 => 17
        322424827 => 18
        322424826 => 19
        322424825 => 20
        322424824 => 21
    
Que fait <decrypt> ?

* [0x8(%ebp)] => INPUT *

    - Stocke la chaîne "Q}|u`sfg~sf{}|a3"
    - Dans une boucle effectue une opération xor DELTA sur chacun des caractères de "Q}|u`sfg~sf{}|a3"
    - Pour finalement comparer le résultat à la chaîne "Congratulations!"
    - Et éxécuter un shell "\bin\sh" si la comparaison est exacte
    
    # Quel DELTA nous permettrait donc d'obtenir "Congratulations!" via un xor sur "Q}|u`sfg~sf{}|a3" ?

    # Dans l'invité de commande python :
    
            >>> for i in range(22):
        ...     str = ""
        ...     for c in "Q}|u`sfg~sf{}|a3":
        ...             xorc = ord(c) ^ i        -----------> ord() convertis notre caractère e valeur ASCII
        ...             str = str + chr(xorc)    -----------> chr() convertis notre valeur ASCII en caractère
        ...     print("%d => %s" % (i,str))
        ...
        0 => Q}|u`sfg~sf{}|a3
        1 => P|}targf rgz|}`2
        2 => S ~wbqde|qdy ~c1
        ...
        16 => Amlepcvwncvkmlq#
        17 => @lmdqbwvobwjlmp"
        18 => Congratulations!
        19 => Bnofs`utm`uhnor
        20 => Eihatgrsjgroihu'
        21 => Dhi`ufsrkfsnhit&
    

En joignant nos deux tableaux :

        322424827 => 18 => Congratulations! => system("\bin\sh")
  
On a donc notre solution, l'input doit être égale à 322424827 afin de pouvoir que le décryptage de "Q}|u`sfg~sf{}|a3" s'effectue avec un xor de 18. Pour obtenir 
l'accès au shell "\bin\sh".

Next ...
